Requirements:
* list of pokemon to search against
* be able to select pokemon
* retrieve details of pokemon from PokeAPI
* maintain a list of favorite pokemon?
** include a way to add and remove pokemon to the favorites list
* add custom pokemon?
** name, details, picture

Features:
* Favorites screen
* Inventory for Pokemon
* Let users save their preferences and settings
* Displaying the Pokemon
** Display screen should be interactive

Display Pokemon
* ID
* Name
* Sprites
* Moves (Customizable)
* Stats

Technical Aspect:
* use a modern CSS framework on how to style react components
* create themes (light/dark/custom?)
* create a database to persist data
* create a user login and store their data
* Pokeshop

Tech Stack:
* Tailwind CSS
* NextJS + React
* PostgreSQL
* backend service/api? see how NextJS supports having a backend api
* NestJS

TODO:
* Got data from PokeAPI and rendered it in a component on a page.
* Render a pageable list of pokemon and load basic data about the pokemon when you click on it.
** Customize scrollbar (https://levelup.gitconnected.com/build-on-hover-custom-scrollbar-in-react-d846194a7ea4)
** Add a trigger to fetch more data to support infinite scrolling.

Learned:
* Server and Client components need to be separated. Data is retrieved by Server components and displayed as static html. Interactive components can only exist in the Client components.
* Client components that require data fetches need to be synchronous.

11/16/22
* The layout is served and the sibling page.tsx is loaded inside the {children}.
* SVG components have properties available that we can access.

11/17/22
* Learned styling using Tailwind CSS.
* Moved the Pokemon Information styling into divs instead of SVGs.
* Learned about routing :)

11/21/22
* NextJS adds <div>s for each Page (each nested route path adds more divs).
  This is because of React doesn't allow finding the DOM node from a component (see: https://github.com/vercel/next.js/discussions/41745#discussioncomment-3969587)
* Found new CSS style. 'text-transform: capitalize' will capitalize the first letter of every word in that div (however, it will not make the rest of the letters lowercase).

11/22/22
* Loaded pictures from PokeAPI's URL and how to use NextJS's Image component.

11/23/22
* Updated the styling to match the new design.

11/28/22
* Learned how to add infinite scrolling to divs

11/29/22
* Learned not to beta test software üëç

11/30/22
* Learned how to debug our application.

12/01/22
* Issue was not in the pokemon/[id]/page.tsx. Will try remaking the site with a static list of pokemon and following their SSR example more closely.

12/05/22
* Started styling the scrollbar
* Learned about "ref" and useRef.

12/06/22
* Reference that we were using is no good. It's using React 16.8 which is too old. A lot of the code they were using was causing errors in our version.

12/07/22
* Using 'https://levelup.gitconnected.com/build-on-hover-custom-scrollbar-in-react-d846194a7ea4' to implement a scrollbar.
* Learning the pieces of putting a scrollbar together.
* When a component is re-rendering, a referenced DOM element can be null.

12/08/22
* Needed to add "scrollHeight" as a dependency to the useEffect that calculates the thumb height because the data loads up after the DOM renders.

12/12/22
* Scrollbar shows on MouseOver is alternating because we are entering and leaving the parent DOM whenever we hover over child elements.

12/13/22
* Did you know onMouseOut and onMouseLeave is different? onMouseOut triggers when leaving the element it is attached to, even if it's to a child element.
  This causes the event to fire every time you transition to another child element or back into the parent element.
  To prevent this, use onMouseLeave, which only fires once it leaves the area of the attached element.